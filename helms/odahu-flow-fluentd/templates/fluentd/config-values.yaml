kind: ConfigMap
apiVersion: v1
metadata:
  name: "{{ .Release.Name }}-config"
  labels:
    {{- include "fluentd.helm-labels" (dict "component" "fluentd" "root" .) | nindent 4 }}
data:
  fluent.conf: |
    <source>
      @type forward
      port {{ .Values.fluentd.port }}
      bind 0.0.0.0
    </source>

    # Add time as a regular field
    <filter *>
      @type record_transformer
      <record>
        time ${time}
      </record>
    </filter>

    {{- if .Values.output }}
    # {{ .Values.output.target }} output
    {{- if eq .Values.output.target "s3"}}
    <match *>
      @type s3

      {{- if eq .Values.output.s3.authorization "secret" }}
      # Auth based on secrets from HELM configuration
      # Secrets are attached as secretKeyRefs from "{{ .Release.Name }}-fluentd-secret" secret
      aws_key_id "#{ENV['AWS_ACCESS_KEY_ID']}"
      aws_sec_key "#{ENV['AWS_SECRET_ACCESS_KEY']}"
      {{- end }}
      {{- if eq .Values.output.s3.authorization "iam" }}
      <instance_profile_credentials>
      </instance_profile_credentials>
      {{- end }}

      # Connection
      s3_bucket {{ required "S3 bucket values is required" .Values.output.s3.bucket }}
      s3_region {{ required "S3 region values is required" .Values.output.s3.region }}

      # Storing
      s3_object_key_format {{ .Values.output.objectKeyFormat }}

      store_as {{ .Values.output.storeAs }}
      time_slice_wait {{ .Values.output.timeSliceWait }}
      utc
    {{- end }}
    {{- if eq .Values.output.target "gcs"}}
    <match *>
      @type gcs

      {{- if eq .Values.output.gcs.authorization "keyfile" }}
      # Auth based on secrets from HELM configuration
      # Secrets are attached as secretKeyRefs from "{{ .Release.Name }}-fluentd-secret" secret
      project {{ .Values.output.gcs.project }}
      keyfile /opt/fluent-keyfile/keyfile.json

      {{- end }}

      # Storing
      bucket {{ required "GCS bucket value is required" .Values.output.gcs.bucket }}
      object_key_format {{ .Values.output.objectKeyFormat }}

      store_as {{ .Values.output.storeAs }}
      time_slice_wait {{ .Values.output.timeSliceWait }}
      utc
    {{- end }}
    {{- if eq .Values.output.target "azureblob"}}
    <match *>
      @type azure-storage-append-blob

      {{- if eq .Values.output.azureblob.authorization "accesskey" }}
      # Auth based on secrets from HELM configuration
      # Secrets are attached as secretKeyRefs from "{{ .Release.Name }}-fluentd-secret" secret
      azure_storage_account "#{ENV['AZURE_STORAGE_ACCOUNT']}"
      azure_storage_access_key "#{ENV['AZURE_STORAGE_ACCESS_KEY']}"
      {{- end }}
      {{- if eq .Values.output.azureblob.authorization "sastoken" }}
      # Auth based on secrets from HELM configuration
      # Secrets are attached as secretKeyRefs from "{{ .Release.Name }}-fluentd-secret" secret
      azure_storage_account "#{ENV['AZURE_STORAGE_ACCOUNT']}"
      azure_storage_sas_token "#{ENV['AZURE_STORAGE_SAS_TOKEN']}"
      {{- end }}

      # Storing
      azure_container {{ required "Azure Blob container name is required" .Values.output.azureblob.bucket }}
      azure_object_key_format {{ .Values.output.objectKeyFormat }}
      auto_create_container "true"
    {{- end }}

      path {{ .Values.output.path }}
      time_slice_format {{ .Values.output.timeSliceFormat }}

      # Buffering
      <buffer tag,time,model_name,model_version>
        @type file
        path {{ .Values.output.buffering.path }}/default
        timekey {{ .Values.output.buffering.timekey }}
        timekey_wait {{ .Values.output.buffering.timekeyWait }}
        timekey_use_utc true
      </buffer>

      # Formatting
      <format>
        @type {{ .Values.output.format }}
      </format>
    </match>
    {{- end }}
