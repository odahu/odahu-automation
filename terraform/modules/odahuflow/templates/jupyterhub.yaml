# TEMP
hub:
  extraConfig:
    myConfig.py: |
      c.Spawner.default_url = '/lab'

proxy:
  secretToken: ${secret_token}
  service:
    type: ClusterIP

ingress:
  enabled: true
  path: /jupyterhub
  hosts:
    - "odahu.${cluster_name}.${root_domain}"
  tls:
  - hosts:
    - "odahu.${cluster_name}.${root_domain}"
    secretName: "${cluster_name}-tls"
  annotations:
    nginx.ingress.kubernetes.io/auth-signin: https://auth.${cluster_name}.${root_domain}/oauth2/start?rd=https://$host$escaped_request_uri
    nginx.ingress.kubernetes.io/auth-url: http://oauth2-proxy.kube-system.svc.cluster.local:4180/oauth2/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      # This is used for redirection user to oauth2 address
      set_escape_uri $escaped_request_uri $request_uri;

      # These collect headers from oauth2
      auth_request_set $user   $upstream_http_x_auth_request_user;
      auth_request_set $email  $upstream_http_x_auth_request_email;
      auth_request_set $jwt    $upstream_http_x_auth_request_access_token;

      # This is a fix for really big sized Cookies (that we have with JWTs inside).
      auth_request_set $_oauth2_proxy_1 $upstream_cookie__oauth2_proxy_1;

      # These are a headers for upstreams to get information about current user
      proxy_set_header X-User            $user;
      proxy_set_header X-Email           $email;
      proxy_set_header X-JWT             $jwt;
      proxy_set_header Authorization     "Bearer $jwt";

      # This is a fix for really big sized Cookies (that we have with JWTs inside).
      access_by_lua_block {
          if ngx.var._oauth2_proxy_1 ~= "" then
              ngx.header["Set-Cookie"] = "_oauth2_proxy_1=" .. ngx.var._oauth2_proxy_1 .. ngx.var.auth_cookie:match("(; .*)")
          end
      }
