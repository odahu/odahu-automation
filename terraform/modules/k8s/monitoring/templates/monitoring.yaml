namespace: "${monitoring_namespace}"
prometheus-operator:
  createCustomResource: "false"
  alertmanager:
    templateFiles:
      default.tmpl: |-
        {{ define "__alertmanager" }}Cluster: CLUSTER_NAME{{ end }}
        {{ define "__alertmanagerURL" }}{{ .ExternalURL }}/#/alerts?receiver={{ .Receiver }}{{ end }}

        {{ define "__subject" }}[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .GroupLabels.SortedPairs.Values | join " " }} {{ if gt (len .CommonLabels) (len .GroupLabels) }}({{ with .CommonLabels.Remove .GroupLabels.Names }}{{ .Values | join " " }}{{ end }}){{ end }}{{ end }}
        {{ define "__description" }}{{ end }}

        {{ define "__text_alert_list" }}{{ range . }}Labels:
        {{ range .Labels.SortedPairs }} - {{ .Name }} = {{ .Value }}
        {{ end }}Annotations:
        {{ range .Annotations.SortedPairs }} - {{ .Name }} = {{ .Value }}
        {{ end }}Source: {{ .GeneratorURL }}
        {{ end }}{{ end }}

        {{ define "slack.default.title" }}{{ template "__subject" . }}{{ end }}
        {{ define "slack.default.username" }}{{ template "__alertmanager" . }}{{ end }}
        {{ define "slack.default.fallback" }}{{ template "slack.default.title" . }} | {{ template "slack.default.titlelink" . }}{{ end }}
        {{ define "slack.default.pretext" }}{{ end }}
        {{ define "slack.default.titlelink" }}{{ template "__alertmanagerURL" . }}{{ end }}
        {{ define "slack.default.iconemoji" }}{{ end }}
        {{ define "slack.default.iconurl" }}{{ end }}
        {{ define "slack.default.text" }}{{ end }}
        {{ define "slack.default.footer" }}{{ end }}
    alertmanagerSpec:
      externalUrl: "https://${cluster_domain}/alertmanager"
      routePrefix: "/"
    ingress:
      paths:
      - "/alertmanager"
      hosts:
      - "${cluster_domain}"
      tls:
      - secretName: "${ingress_tls_secret_name}"
        hosts: ["${cluster_domain}"]
      ${indent(6, nginx_annotations)}

  prometheus:
    prometheusSpec:
      externalUrl: "https://${cluster_domain}/prometheus"
      routePrefix: "/"
      storageSpec:
        volumeClaimTemplate:
          spec:
            resources:
              requests:
                storage: "${prom_storage_size}"
      retention: "${prom_retention_time}"
      retentionSize: "${prom_retention_size}"
      resources:
        limits:
          cpu: "2"
          memory: "2.5Gi"
        requests:
          cpu: "1"
          memory: "2Gi"
    ingress:
      paths:
      - "/prometheus"
      hosts:
      - "${cluster_domain}"
      tls:
      - secretName: "${ingress_tls_secret_name}"
        hosts: ["${cluster_domain}"]
      ${indent(6, nginx_annotations)}

odahuflow-grafana:
  image:
    tag: "${grafana_image_tag}"
  adminUser: "${grafana_admin}"
  adminPassword: "${grafana_pass}"
  deploymentStrategy:
    type: Recreate
  persistence:
    enabled: true
    initChownData: true
    accessModes:
    - ReadWriteOnce
    size: "${grafana_storage_size}"
  ingress:
    path: "/grafana"
    hosts:
    - "${cluster_domain}"
    tls:
    - secretName: "${ingress_tls_secret_name}"
      hosts: ["${cluster_domain}"]
    ${indent(4, nginx_annotations)}
  grafana.ini:
    auth.anonymous:
      enabled: true
    security:
      disable_gravatar: true
      allow_embedding: true
    analytics:
      reporting_enabled: false
    server:
      domain: ${cluster_domain}
      root_url: "%(protocol)s://%(domain)s/grafana"
      serve_from_sub_path: true
    dashboards:
      default_home_dashboard_path: /tmp/dashboards/k8s/nodes.json
