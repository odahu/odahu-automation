namespace: "${monitoring_namespace}"

prometheus-operator:
  alertmanager:
    templateFiles:
      default.tmpl: |-
        {{ define "__alertmanager" }}Cluster: CLUSTER_NAME{{ end }}
        {{ define "__alertmanagerURL" }}{{ .ExternalURL }}/#/alerts?receiver={{ .Receiver }}{{ end }}

        {{ define "__subject" }}[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .GroupLabels.SortedPairs.Values | join " " }} {{ if gt (len .CommonLabels) (len .GroupLabels) }}({{ with .CommonLabels.Remove .GroupLabels.Names }}{{ .Values | join " " }}{{ end }}){{ end }}{{ end }}
        {{ define "__description" }}{{ end }}

        {{ define "__text_alert_list" }}{{ range . }}Labels:
        {{ range .Labels.SortedPairs }} - {{ .Name }} = {{ .Value }}
        {{ end }}Annotations:
        {{ range .Annotations.SortedPairs }} - {{ .Name }} = {{ .Value }}
        {{ end }}Source: {{ .GeneratorURL }}
        {{ end }}{{ end }}

        {{ define "slack.default.title" }}{{ template "__subject" . }}{{ end }}
        {{ define "slack.default.username" }}{{ template "__alertmanager" . }}{{ end }}
        {{ define "slack.default.fallback" }}{{ template "slack.default.title" . }} | {{ template "slack.default.titlelink" . }}{{ end }}
        {{ define "slack.default.pretext" }}{{ end }}
        {{ define "slack.default.titlelink" }}{{ template "__alertmanagerURL" . }}{{ end }}
        {{ define "slack.default.iconemoji" }}{{ end }}
        {{ define "slack.default.iconurl" }}{{ end }}
        {{ define "slack.default.text" }}{{ end }}
        {{ define "slack.default.footer" }}{{ end }}
    alertmanagerSpec:
      externalUrl: https://${cluster_domain}/alertmanager
      routePrefix: /
    ingress:
      enabled: true
      paths:
        - /alertmanager
      hosts:
        - "${cluster_domain}"
      tls:
        - secretName: "${ingress_tls_secret_name}"
          hosts: ["${cluster_domain}"]
      annotations:
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/rewrite-target: /
        nginx.ingress.kubernetes.io/configuration-snippet: |-
            set_escape_uri $escaped_request_uri $request_uri;
            auth_request_set $user   $upstream_http_x_auth_request_user;
            auth_request_set $email  $upstream_http_x_auth_request_email;
            auth_request_set $jwt    $upstream_http_x_auth_request_access_token;
            auth_request_set $_oauth2_proxy_1 $upstream_cookie__oauth2_proxy_1;
 
            proxy_set_header X-User            $user;
            proxy_set_header X-Email           $email;
            proxy_set_header X-JWT             $jwt;
            proxy_set_header Authorization     "Bearer $jwt";

            access_by_lua_block {
                if ngx.var._oauth2_proxy_1 ~= "" then
                    ngx.header["Set-Cookie"] = "_oauth2_proxy_1=" .. ngx.var._oauth2_proxy_1 .. ngx.var.auth_cookie:match("(; .*)")
                end
            }
        nginx.ingress.kubernetes.io/auth-signin: https://${cluster_domain}/oauth2/start?rd=https://$host$escaped_request_uri
        nginx.ingress.kubernetes.io/auth-url: http://oauth2-proxy.kube-system.svc.cluster.local:4180/oauth2/auth
    alertmanagerSpec:
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: "${grafana_storage_class}"

  prometheus:
    prometheusSpec:
      externalUrl: https://${cluster_domain}/prometheus
      routePrefix: /
    ingress:
      paths:
        - /prometheus
      hosts:
        - "${cluster_domain}"
      tls:
        - secretName: "${ingress_tls_secret_name}"
          hosts: ["${cluster_domain}"]
      annotations:
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/rewrite-target: /
        nginx.ingress.kubernetes.io/configuration-snippet: |-
            set_escape_uri $escaped_request_uri $request_uri;
            auth_request_set $user   $upstream_http_x_auth_request_user;
            auth_request_set $email  $upstream_http_x_auth_request_email;
            auth_request_set $jwt    $upstream_http_x_auth_request_access_token;
            auth_request_set $_oauth2_proxy_1 $upstream_cookie__oauth2_proxy_1;
 
            proxy_set_header X-User            $user;
            proxy_set_header X-Email           $email;
            proxy_set_header X-JWT             $jwt;
            proxy_set_header Authorization     "Bearer $jwt";

            access_by_lua_block {
                if ngx.var._oauth2_proxy_1 ~= "" then
                    ngx.header["Set-Cookie"] = "_oauth2_proxy_1=" .. ngx.var._oauth2_proxy_1 .. ngx.var.auth_cookie:match("(; .*)")
                end
            }
        nginx.ingress.kubernetes.io/auth-signin: https://${cluster_domain}/oauth2/start?rd=https://$host$escaped_request_uri
        nginx.ingress.kubernetes.io/auth-url: http://oauth2-proxy.kube-system.svc.cluster.local:4180/oauth2/auth
    prometheusSpec:
      storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: "${grafana_storage_class}"

odahuflow-grafana:
  adminUser: "${grafana_admin}"
  adminPassword:  "${grafana_pass}"
  persistence:
    storageClassName: "${grafana_storage_class}"
  ingress:
    path: /grafana
    hosts:
      - "${cluster_domain}"
    tls:
      - secretName: "${ingress_tls_secret_name}"
        hosts: ["${cluster_domain}"]
    annotations:     
      nginx.ingress.kubernetes.io/rewrite-target: "/"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/configuration-snippet: |-
          set_escape_uri $escaped_request_uri $request_uri;
          auth_request_set $user   $upstream_http_x_auth_request_user;
          auth_request_set $email  $upstream_http_x_auth_request_email;
          auth_request_set $jwt    $upstream_http_x_auth_request_access_token;
          auth_request_set $_oauth2_proxy_1 $upstream_cookie__oauth2_proxy_1;

          proxy_set_header X-User            $user;
          proxy_set_header X-Email           $email;
          proxy_set_header X-JWT             $jwt;
          proxy_set_header Authorization     "";

          access_by_lua_block {
              if ngx.var._oauth2_proxy_1 ~= "" then
                  ngx.header["Set-Cookie"] = "_oauth2_proxy_1=" .. ngx.var._oauth2_proxy_1 .. ngx.var.auth_cookie:match("(; .*)")
              end
          }
      nginx.ingress.kubernetes.io/auth-signin: https://${cluster_domain}/oauth2/start?rd=https://$host$escaped_request_uri
      nginx.ingress.kubernetes.io/auth-url: http://oauth2-proxy.kube-system.svc.cluster.local:4180/oauth2/auth
  env:
    GF_AUTH_ANONYMOUS_ENABLED: "true"
    GF_SERVER_ROOT_URL: "https://${cluster_domain}/grafana/"
