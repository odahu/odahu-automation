namespace: "${monitoring_namespace}"
prometheus-operator:
  createCustomResource: "false"
  alertmanager:
    templateFiles:
      default.tmpl: |-
        {{ define "__alertmanager" }}Cluster: CLUSTER_NAME{{ end }}
        {{ define "__alertmanagerURL" }}{{ .ExternalURL }}/#/alerts?receiver={{ .Receiver }}{{ end }}

        {{ define "__subject" }}[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .GroupLabels.SortedPairs.Values | join " " }} {{ if gt (len .CommonLabels) (len .GroupLabels) }}({{ with .CommonLabels.Remove .GroupLabels.Names }}{{ .Values | join " " }}{{ end }}){{ end }}{{ end }}
        {{ define "__description" }}{{ end }}

        {{ define "__text_alert_list" }}{{ range . }}Labels:
        {{ range .Labels.SortedPairs }} - {{ .Name }} = {{ .Value }}
        {{ end }}Annotations:
        {{ range .Annotations.SortedPairs }} - {{ .Name }} = {{ .Value }}
        {{ end }}Source: {{ .GeneratorURL }}
        {{ end }}{{ end }}

        {{ define "slack.default.title" }}{{ template "__subject" . }}{{ end }}
        {{ define "slack.default.username" }}{{ template "__alertmanager" . }}{{ end }}
        {{ define "slack.default.fallback" }}{{ template "slack.default.title" . }} | {{ template "slack.default.titlelink" . }}{{ end }}
        {{ define "slack.default.pretext" }}{{ end }}
        {{ define "slack.default.titlelink" }}{{ template "__alertmanagerURL" . }}{{ end }}
        {{ define "slack.default.iconemoji" }}{{ end }}
        {{ define "slack.default.iconurl" }}{{ end }}
        {{ define "slack.default.text" }}{{ end }}
        {{ define "slack.default.footer" }}{{ end }}
    alertmanagerSpec:
      externalUrl: https://${cluster_domain}/alertmanager
      routePrefix: /
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: "${storage_class}"
    ingress:
      paths:
        - /alertmanager
      hosts:
        - "${cluster_domain}"
      tls:
        - secretName: "${ingress_tls_secret_name}"
          hosts: ["${cluster_domain}"]
      ${indent(6, prom_annotations)}

  prometheus:
    prometheusSpec:
      externalUrl: https://${cluster_domain}/prometheus
      routePrefix: /
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: "${storage_class}"
    ingress:
      paths:
        - /prometheus
      hosts:
        - "${cluster_domain}"
      tls:
        - secretName: "${ingress_tls_secret_name}"
          hosts: ["${cluster_domain}"]
      ${indent(6, prom_annotations)}

odahuflow-grafana:
  adminUser: "${grafana_admin}"
  adminPassword:  "${grafana_pass}"
  persistence:
    storageClassName: "${storage_class}"
  ingress:
    path: /grafana
    hosts:
      - "${cluster_domain}"
    tls:
      - secretName: "${ingress_tls_secret_name}"
        hosts: ["${cluster_domain}"]
    ${indent(4, grafana_annotations)}
  env:
    GF_AUTH_ANONYMOUS_ENABLED: "true"
    GF_SERVER_ROOT_URL: "https://${cluster_domain}/grafana/"
