proxy:
  secretToken: ${jupyterhub_secret_token}
  service:
    type: ClusterIP
  https:
    enabled: false

debug:
  enabled: ${debug_enabled}

hub:
  service:
    type: ClusterIP
  baseUrl: /jupyterhub
  extraConfig:
    jupyterlab: |
      c.Spawner.cmd = ['jupyter-labhub']
  extraEnv:
    OAUTH2_AUTHORIZE_URL: ${oauth_oidc_issuer_url}/protocol/openid-connect/auth
    OAUTH2_TOKEN_URL: ${oauth_oidc_issuer_url}/protocol/openid-connect/token
    OAUTH_CALLBACK_URL: https://${cluster_domain}/jupyterhub/hub/oauth_callback
%{ if pgsql_enabled }
  db:
    type: postgres
    url: ${pgsql_url}
    password: ${pgsql_password}
%{ else ~}
  db:
    type: sqlite-pvc
    pvc:
      accessModes:
      - ReadWriteOnce
      storage: 1Gi
%{ endif ~}

${ingress}

auth:
  type: custom
  custom:
    className: oauthenticator.generic.GenericOAuthenticator
    config:
      login_service: "keycloak"
      auto_login: true
      client_id: "${oauth_client_id}"
      client_secret: "${oauth_client_secret}"
      token_url: "${oauth_oidc_issuer_url}/protocol/openid-connect/token"
      userdata_url: "${oauth_oidc_issuer_url}/protocol/openid-connect/userinfo"
      userdata_method: GET
      userdata_params: {'state': 'state'}
      username_key: preferred_username

prePuller:
  hook:
    enabled: ${image_puller}

singleuser:
  startTimeout: 900
  extraEnv:
    API_AUTH_ENABLED: "false"
    DEFAULT_API_ENDPOINT: "http://odahu-flow-api.odahu-flow.svc.cluster.local:80"
%{ if cloud_type == "gcp" ~}
    GOOGLE_APPLICATION_CREDENTIALS: "/tmp/sa/jupyterhub-sa.json"
    CLOUDSDK_CORE_PROJECT: "${project_id}"
%{ endif ~}
%{ if cloud_type == "aws" ~}
    AWS_ACCESS_KEY_ID: "${aws_key_id}"
    AWS_SECRET_ACCESS_KEY: "${aws_key}"
%{ endif ~}
%{ if cloud_type == "azure" ~}
    AZURE_STORAGE_ACCOUNT: "${azure_account_name}"
    AZURE_STORAGE_SAS_TOKEN: "${azure_sas_token}"
%{ endif ~}
  defaultUrl: "/lab"
%{ if cloud_type == "gcp" ~}
  storage:
    extraVolumes:
      - name: sa
        secret:
          secretName: jupyterhub-sa
          items:
          - key: key
            path: jupyterhub-sa.json
    extraVolumeMounts:
      - name: sa
        mountPath: "/tmp/sa"
        readOnly: true
%{ endif ~}
  image:
    name: ${docker_repo}/base-notebook
    tag: ${docker_tag}
  profileList:
    - display_name: "Base Jupyter Notebook"
      description: "Base image for Jupyter Notebook with ODAHU plugin"
      default: true
    - display_name: "Datascience environment"
      description: "Python, R, and Julia with ODAHU plugin."
      kubespawner_override:
        image: ${docker_repo}/datascience-notebook:${docker_tag}
    - display_name: "Tensorflow environment"
      description: "Jupyter Notebook Scientific Python Stack w/ Tensorflow and ODAHU plugin"
      kubespawner_override:
        image: ${docker_repo}/tensorflow-notebook:${docker_tag}

${culling}
