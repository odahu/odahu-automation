serviceAccount:
  create: true

rbac:
  create: true

workers:
  enabled: false

web:
  baseUrl: "http://localhost:8080/airflow"
  initialDelaySeconds: "80"

airflow:
  image:
    repository: ${docker_repo}/odahu-airflow
    tag: ${odahu_airflow_plugin_version}
    pullPolicy: IfNotPresent
    pullSecret: repo-json-key

  fernetKey: ${fernet_key}

  variables: '${airflow_variables}'
  connections:
  - id: odahuflow_api
    type: http
    schema: https
    host: ${cluster_domain}
    extra: '${odahu_conn}'
  - id: odahuflow_model
    type: http
    schema: https
    host: ${cluster_domain}/service-catalog
  - id: wine_input
    type: google_cloud_platform
    extra: '${wine_conn}'

  webReplicas: 1
  config:
    AIRFLOW__CORE__LOGGING_LEVEL: DEBUG
    AIRFLOW__CORE__LOAD_EXAMPLES: True
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: False
    AIRFLOW__CORE__FERNET_KEY: ${fernet_key}
    AIRFLOW__KUBERNETES__DAGS_VOLUME_CLAIM: airflow
    AIRFLOW__KUBERNETES__LOGS_VOLUME_CLAIM: airflow-logs
    AIRFLOW__KUBERNETES__WORKER_CONTAINER_IMAGE_PULL_POLICY: IfNotPresent
    AIRFLOW__KUBERNETES__WORKER_SERVICE_ACCOUNT_NAME: airflow
    AIRFLOW__KUBERNETES__NAMESPACE: ${namespace}
    AIRFLOW__KUBERNETES__ENV_FROM_CONFIGMAP_REF: airflow-env
    AIRFLOW__KUBERNETES__WORKER_CONTAINER_REPOSITORY: ${docker_repo}/odahu-airflow
    AIRFLOW__KUBERNETES__WORKER_CONTAINER_TAG: ${odahu_airflow_plugin_version}

  service:
    type: ClusterIP
    port: 80

  executor: Kubernetes

${ingress}

persistence:
  enabled: true
  storageClass: nfs
  accessMode: ReadWriteMany
  size: ${storage_size}

logsPersistence:
  enabled: true
  storageClass: nfs
  accessMode: ReadWriteMany
  size: ${log_storage_size}

dags:
  path: /usr/local/airflow/dags

postgresql:
  enabled: false
  service:
    port: 5432
  postgresHost: postgres-pgpool.postgres
  postgresqlDatabase: airflow
  existingSecret: airflow-postgres

redis:
  enabled: false

flower:
  enabled: false


