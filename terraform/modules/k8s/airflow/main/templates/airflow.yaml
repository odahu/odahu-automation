serviceAccount:
  create: true

rbac:
  create: true

workers:
  enabled: false

web:
  baseUrl: "http://localhost:8080/airflow"
  initialDelaySeconds: "80"

airflow:
  image:
    repository: ${docker_repo}/odahu-airflow
    tag: ${odahu_airflow_plugin_version}
    pullPolicy: IfNotPresent

  fernetKey: ${fernet_key}

  variables: '${airflow_variables}'
  connections:
  - id: odahuflow_api
    type: http
    schema: https
    host: ${domain}
    extra: '${odahu_conn}'
  - id: odahuflow_model
    type: http
    schema: https
    host: ${domain}/service-catalog
  - id: wine_input
    type: google_cloud_platform
    extra: '${gcp_wine_conn}'

  webReplicas: 1
  config:
    AIRFLOW__CORE__LOGGING_LEVEL: DEBUG
    AIRFLOW__CORE__LOAD_EXAMPLES: True
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: False
    AIRFLOW__CORE__FERNET_KEY: ${fernet_key}
    AIRFLOW__KUBERNETES__DAGS_VOLUME_CLAIM: airflow
    AIRFLOW__KUBERNETES__LOGS_VOLUME_CLAIM: airflow-logs
    AIRFLOW__KUBERNETES__WORKER_CONTAINER_IMAGE_PULL_POLICY: IfNotPresent
    AIRFLOW__KUBERNETES__WORKER_SERVICE_ACCOUNT_NAME: airflow
    AIRFLOW__KUBERNETES__NAMESPACE: ${namespace}
    AIRFLOW__KUBERNETES__ENV_FROM_CONFIGMAP_REF: airflow-env
    AIRFLOW__KUBERNETES__WORKER_CONTAINER_REPOSITORY: ${docker_repo}/odahu-airflow
    AIRFLOW__KUBERNETES__WORKER_CONTAINER_TAG: ${odahu_airflow_plugin_version}

  service:
    type: ClusterIP
    port: 80

  executor: Kubernetes

  image:
    repository: ${docker_repo}/odahu-airflow
    tag: ${odahu_airflow_plugin_version}
    pullPolicy: IfNotPresent

ingress:
  enabled: true
  web:
    path: /airflow
    host: ${domain}
    annotations:
      nginx.ingress.kubernetes.io/auth-signin: https://${domain}/oauth2/start?rd=https://$host$escaped_request_uri
      nginx.ingress.kubernetes.io/auth-url: http://oauth2-proxy.kube-system.svc.cluster.local:4180/oauth2/auth
      nginx.ingress.kubernetes.io/configuration-snippet: |-
        set_escape_uri $escaped_request_uri $request_uri;
        auth_request_set $user   $upstream_http_x_auth_request_user;
        auth_request_set $email  $upstream_http_x_auth_request_email;
        auth_request_set $jwt    $upstream_http_x_auth_request_access_token;
        auth_request_set $_oauth2_proxy_1 $upstream_cookie__oauth2_proxy_1;

        proxy_set_header X-User            $user;
        proxy_set_header X-Email           $email;
        proxy_set_header X-JWT             $jwt;
        proxy_set_header Authorization     "";

        access_by_lua_block {
          if ngx.var._oauth2_proxy_1 ~= "" then
              ngx.header["Set-Cookie"] = "_oauth2_proxy_1=" .. ngx.var._oauth2_proxy_1 .. ngx.var.auth_cookie:match("(; .*)")
          end
        }
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  tls:
    enabled: true
    secretName: odahu-flow-tls

persistence:
  enabled: true
  storageClass: nfs
  accessMode: ReadWriteMany
  size: ${storage_size}

logsPersistence:
  enabled: true
  storageClass: nfs
  accessMode: ReadWriteMany
  size: ${log_storage_size}

dags:
  path: /usr/local/airflow/dags

postgresql:
  enabled: false
  service:
    port: 5432
  postgresHost: postgres-pgpool.postgres
  postgresqlDatabase: airflow
  existingSecret: airflow-postgres

redis:
  enabled: false

flower:
  enabled: false


