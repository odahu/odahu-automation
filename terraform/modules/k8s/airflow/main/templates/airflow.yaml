serviceAccount:
  create: false

rbac:
  create: true

workers:
  enabled: false

web:
  baseUrl: "http://localhost:8080/airflow"
  initialDelaySeconds: "80"

airflow:
  image:
    repository: ${docker_repo}/odahu-airflow
    tag: ${odahu_airflow_plugin_version}
    pullPolicy: IfNotPresent
    pullSecret: repo-json-key

  fernetKey: ${fernet_key}

  variables: '${airflow_variables}'
  connections:
  - id: odahuflow_api
    type: http
    schema: https
    host: ${cluster_domain}
    extra: '${odahu_conn}'
  - id: odahuflow_model
    type: http
    schema: https
    host: ${cluster_domain}/service-catalog
  - id: wine_input
    type: google_cloud_platform
    extra: '${wine_conn}'

  webReplicas: 1

  extraEnv:
    - name: POSTGRES_PASSWORD
      valueFrom:
        secretKeyRef:
          name: airflow-postgres
          key: postgresql-password
    - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
      value: postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@$(POSTGRES_HOST)/$(POSTGRES_DB)

  config:
    AIRFLOW__CORE__LOGGING_LEVEL: DEBUG
    AIRFLOW__CORE__LOAD_EXAMPLES: True
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: False
    AIRFLOW__CORE__FERNET_KEY: ${fernet_key}
    AIRFLOW__KUBERNETES__LOGS_VOLUME_CLAIM: airflow-logs
    AIRFLOW__KUBERNETES__WORKER_CONTAINER_IMAGE_PULL_POLICY: IfNotPresent
    AIRFLOW__KUBERNETES__WORKER_SERVICE_ACCOUNT_NAME: default
    AIRFLOW__KUBERNETES__NAMESPACE: ${namespace}
    AIRFLOW__KUBERNETES__ENV_FROM_CONFIGMAP_REF: airflow-env
    AIRFLOW__KUBERNETES__WORKER_CONTAINER_REPOSITORY: ${docker_repo}/odahu-airflow
    AIRFLOW__KUBERNETES__WORKER_CONTAINER_TAG: ${odahu_airflow_plugin_version}
    AIRFLOW__KUBERNETES__DELETE_WORKER_PODS: True
    %{ if ("${dag_repo}" != "" && "${dag_rev}" != "") }
    AIRFLOW__KUBERNETES__GIT_REPO: "${dag_repo}"
    AIRFLOW__KUBERNETES__GIT_BRANCH: "${dag_rev}"
    AIRFLOW__KUBERNETES__GIT_DAGS_FOLDER_MOUNT_POINT: "/usr/local/airflow/dags"
    AIRFLOW__KUBERNETES__GIT_SYNC_BRANCH: "${dag_rev}"
    AIRFLOW__KUBERNETES__GIT_SYNC_ROOT: "/usr/local/airflow/dags"
    AIRFLOW__KUBERNETES__GIT_SYNC_DEST: "/usr/local/airflow/dags"
    AIRFLOW__KUBERNETES__GIT_SYNC_CONTAINER_REPOSITORY: gcr.io/or2-msq-epmd-legn-t1iylu/odahu/git-sync
    AIRFLOW__KUBERNETES__GIT_SYNC_CONTAINER_TAG: 0.0.3
    AIRFLOW__KUBERNETES__GIT_SYNC_INIT_CONTAINER_NAME: git-sync-clone
    %{ else }
    AIRFLOW__KUBERNETES__DAGS_VOLUME_CLAIM: airflow
    %{ endif }
  service:
    type: ClusterIP
    port: 80

  executor: Kubernetes

${ingress}

persistence:
  %{ if ("${dag_repo}" != "" && "${dag_rev}" != "") }
  enabled: false
  %{ else }
  enabled: true
  %{ endif }
  storageClass: nfs
  accessMode: ReadWriteMany
  size: ${storage_size}

logsPersistence:
  enabled: true
  storageClass: nfs
  accessMode: ReadWriteMany
  size: ${log_storage_size}

dags:
  path: /usr/local/airflow/dags
  %{ if ("${dag_repo}" != "" && "${dag_rev}" != "") }
  git:
    url: "${dag_repo}"
    ref: "${dag_rev}"
    repoHost: ""
    gitSync:
      enabled: true
      image:
        repository: alpine/git
        tag: v2.24.1
        pullPolicy: IfNotPresent
      refreshTime: 30
  initContainer:
    enabled: true
    image:
      repository: alpine/git
      tag: v2.24.1
      pullPolicy: IfNotPresent
    installRequirements: true
    mountPath: "/dags"
    syncSubPath: ""
  %{ endif }
postgresql:
  enabled: false
  service:
    port: 5432
  postgresUser: airflow
  postgresHost: odahu-db.postgresql
  postgresqlDatabase: airflow
  existingSecret: airflow-postgres

redis:
  enabled: false

flower:
  enabled: false
